// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// TaskItemIdResponse defines model for TaskItemIdResponse.
type TaskItemIdResponse struct {
	// Id Unique identifier of the task item.
	Id *uint64 `json:"id,omitempty"`
}

// TaskItemResponse defines model for TaskItemResponse.
type TaskItemResponse struct {
	// Body Base64-encoded representation of the body of the task item.
	Body *[]byte `json:"body,omitempty"`

	// Created Creation timestamp of the task item.
	Created *time.Time `json:"created,omitempty"`

	// Id Unique identifier of the task item.
	Id *uint64 `json:"id,omitempty"`
}

// TaskResponse defines model for TaskResponse.
type TaskResponse struct {
	Items *[]TaskItemResponse `json:"items,omitempty"`

	// TotalItems The total number of task items.
	TotalItems *int `json:"total_items,omitempty"`
}

// TaskStatusResponse defines model for TaskStatusResponse.
type TaskStatusResponse struct {
	// TotalItems The total number of task items.
	TotalItems *int `json:"total_items,omitempty"`
}

// TaskErrorResponse defines model for task.ErrorResponse.
type TaskErrorResponse struct {
	// Code The error code.
	Code int `json:"code"`

	// Details Additional details about the error, specifying which component failed.
	Details *string `json:"details,omitempty"`

	// Error A description of the error that occurred.
	Error string `json:"error"`
}

// PostTaskJSONBody defines parameters for PostTask.
type PostTaskJSONBody struct {
	// Body Base64-encoded representation of the body of the task item.
	Body []byte `json:"body"`
}

// PostTaskJSONRequestBody defines body for PostTask for application/json ContentType.
type PostTaskJSONRequestBody PostTaskJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all task items
	// (GET /task)
	GetTask(ctx echo.Context) error
	// Add an task item
	// (POST /task)
	PostTask(ctx echo.Context) error
	// Returns the total number of task items
	// (GET /task/status)
	GetTaskStatus(ctx echo.Context) error
	// Delete a task item by ID
	// (DELETE /task/{id})
	DeleteTaskID(ctx echo.Context, id uint64) error
	// Get a task item by ID
	// (GET /task/{id})
	GetTaskID(ctx echo.Context, id uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTask(ctx)
	return err
}

// PostTask converts echo context to params.
func (w *ServerInterfaceWrapper) PostTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTask(ctx)
	return err
}

// GetTaskStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskStatus(ctx)
	return err
}

// DeleteTaskID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskID(ctx, id)
	return err
}

// GetTaskID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/task", wrapper.GetTask)
	router.POST(baseURL+"/task", wrapper.PostTask)
	router.GET(baseURL+"/task/status", wrapper.GetTaskStatus)
	router.DELETE(baseURL+"/task/:id", wrapper.DeleteTaskID)
	router.GET(baseURL+"/task/:id", wrapper.GetTaskID)

}
