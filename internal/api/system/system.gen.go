// Package system provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package system

import (
	"github.com/labstack/echo/v4"
)

// SystemStatus defines model for SystemStatus.
type SystemStatus struct {
	// Disk Disk usage information.
	Disk struct {
		// Free Free disk space in bytes.
		Free int `json:"free"`

		// Total Total disk space in bytes.
		Total int `json:"total"`

		// Used Used disk space in bytes.
		Used int `json:"used"`
	} `json:"disk"`

	// Hostname The hostname of the system.
	Hostname string `json:"hostname"`

	// LoadAverage The system load averages for 1, 5, and 15 minutes.
	LoadAverage struct {
		// N15min Load average for the last 15 minutes.
		N15min float32 `json:"15min"`

		// N1min Load average for the last 1 minute.
		N1min float32 `json:"1min"`

		// N5min Load average for the last 5 minutes.
		N5min float32 `json:"5min"`
	} `json:"load_average"`

	// Memory Memory usage information.
	Memory struct {
		// Free Free memory in bytes.
		Free int `json:"free"`

		// Total Total memory in bytes.
		Total int `json:"total"`

		// Used Used memory in bytes.
		Used int `json:"used"`
	} `json:"memory"`

	// Uptime The uptime of the system.
	Uptime string `json:"uptime"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve system status
	// (GET /system/status)
	GetSystemStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSystemStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSystemStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/system/status", wrapper.GetSystemStatus)

}
