---
version: "3"

vars:
  GIT_ROOT:
    sh: git rev-parse --show-toplevel
  MAIN_PACKAGE: main.go

includes:
  docs:
    taskfile: ./docs
    dir: ./docs

tasks:
  deps:
    desc: Install dependencies
    cmds:
      - npm install -g @redocly/cli
      - go install github.com/spf13/cobra-cli@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/segmentio/golines@latest
      - go install github.com/boumenot/gocover-cobertura@latest
      - go install mvdan.cc/gofumpt@latest
      - go install github.com/jstemmer/go-junit-report@latest
      - go install github.com/air-verse/air@latest
      # - go install github.com/goreleaser/goreleaser@latest

  mod:
    desc: Module maintenance
    cmds:
      - go mod download
      - go mod tidy

  vet:
    desc: Report likely mistakes in packages
    cmds:
      - $(go env GOPATH)/bin/golangci-lint run --config {{ .GIT_ROOT }}/.golangci.yml --build-tags=test

  run:
    desc: Compile and run Go program
    cmds:
      - go run {{ .MAIN_PACKAGE }} {{.CLI_ARGS}}

  unit:
    desc: Test packages
    cmds:
      - go test -tags=test -parallel 5 -race -v ./...

  unit:int:
    desc: Integration test packages
    cmds:
      # TODO(retr0h): fix lame tests
      - go run main.go client ping 2>&1 | grep pong
      - go run main.go client system status

  test:
    desc: Test all
    cmds:
      - task: deps
      - task: mod
      - task: fmt:check
      - task: vet
      - task: cov
      # TODO(retr0h): enable
      # - task: unit:int

  cov:
    desc: Generate coverage
    env:
      # https://github.com/golang/go/issues/65570
      GOEXPERIMENT: nocoverageredesign
    cmds:
      - go test -tags=test -race -coverprofile=cover.out -v $(go list ./...)
      - gocover-cobertura --ignore-files mock.go < cover.out > cobertura.xml
      - go tool cover -func=cover.out

  cov:map:
    desc: Generate coverage and show heatmap
    cmds:
      - task: cov
      - go tool cover -html=cover.out

  fmt:
    desc: Reformat files whose formatting differs from `go_fmt_command`
    cmds:
      - gofumpt -l -w .
      - golines --base-formatter=gofumpt -w .

  fmt:check:
    desc: Check files whose formatting differs from `go_fmt_command`
    cmds:
      # https://github.com/mvdan/gofumpt/issues/114
      - test -z "$(gofumpt -d -e . | tee /dev/stderr)"
      - test -z "$(golines -l --dry-run --base-formatter=gofumpt -w .)"

  dev:serve:
    desc: Serve the API on an Ubuntu Linux VM
    cmds:
      - ssh -L 8080:localhost:8080 nerd.lab

  docker:build:
    desc: Build an image from a Dockerfile
    cmds:
      - docker build -t osapi:latest .

  docker:serve:
    desc: Serve the API on a Docker instance
    cmds:
      - docker run -it -p 8080:8080 osapi:latest

  serve:
    desc: Live reload of server
    cmds:
      - air server

  generate:
    desc: Generate Go files by processing source
    cmds:
      - redocly join --prefix-tags-with-info-prop title -o internal/client/gen/api.yaml internal/api/*/gen/api.yaml
      - go generate ./...
      - task: docs:generate
