// Code generated by MockGen. DO NOT EDIT.
// Source: ../manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jetstream "github.com/nats-io/nats.go/jetstream"
	client "github.com/retr0h/osapi/internal/task/client"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockManager) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockManagerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockManager)(nil).Connect))
}

// CountStreamMessages mocks base method.
func (m *MockManager) CountStreamMessages(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountStreamMessages", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountStreamMessages indicates an expected call of CountStreamMessages.
func (mr *MockManagerMockRecorder) CountStreamMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountStreamMessages", reflect.TypeOf((*MockManager)(nil).CountStreamMessages), ctx)
}

// DeleteMessageBySeq mocks base method.
func (m *MockManager) DeleteMessageBySeq(ctx context.Context, seq uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageBySeq", ctx, seq)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessageBySeq indicates an expected call of DeleteMessageBySeq.
func (mr *MockManagerMockRecorder) DeleteMessageBySeq(ctx, seq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageBySeq", reflect.TypeOf((*MockManager)(nil).DeleteMessageBySeq), ctx, seq)
}

// GetMessageBySeq mocks base method.
func (m *MockManager) GetMessageBySeq(ctx context.Context, seq uint64) (*client.MessageItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageBySeq", ctx, seq)
	ret0, _ := ret[0].(*client.MessageItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageBySeq indicates an expected call of GetMessageBySeq.
func (mr *MockManagerMockRecorder) GetMessageBySeq(ctx, seq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageBySeq", reflect.TypeOf((*MockManager)(nil).GetMessageBySeq), ctx, seq)
}

// GetMessageIterator mocks base method.
func (m *MockManager) GetMessageIterator(ctx context.Context) (jetstream.MessagesContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageIterator", ctx)
	ret0, _ := ret[0].(jetstream.MessagesContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageIterator indicates an expected call of GetMessageIterator.
func (mr *MockManagerMockRecorder) GetMessageIterator(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageIterator", reflect.TypeOf((*MockManager)(nil).GetMessageIterator), ctx)
}

// ListUndeliveredMessages mocks base method.
func (m *MockManager) ListUndeliveredMessages(ctx context.Context) ([]client.MessageItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUndeliveredMessages", ctx)
	ret0, _ := ret[0].([]client.MessageItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUndeliveredMessages indicates an expected call of ListUndeliveredMessages.
func (mr *MockManagerMockRecorder) ListUndeliveredMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUndeliveredMessages", reflect.TypeOf((*MockManager)(nil).ListUndeliveredMessages), ctx)
}

// PublishToStream mocks base method.
func (m *MockManager) PublishToStream(ctx context.Context, data []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishToStream", ctx, data)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishToStream indicates an expected call of PublishToStream.
func (mr *MockManagerMockRecorder) PublishToStream(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishToStream", reflect.TypeOf((*MockManager)(nil).PublishToStream), ctx, data)
}
