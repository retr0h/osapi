"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[733],{7098:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var s=e(5893),t=e(1151);const r={sidebar_position:6},o="Guiding Principles",l={id:"principles",title:"Guiding Principles",description:"1. Simplicity and Minimalism",source:"@site/docs/principles.md",sourceDirName:".",slug:"/principles",permalink:"/osapi/principles",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Contributing",permalink:"/osapi/contributing"},next:{title:"Endpoints",permalink:"/osapi/resources/endpoints"}},c={},a=[];function d(n){const i={h1:"h1",li:"li",ol:"ol",p:"p",strong:"strong",...(0,t.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"guiding-principles",children:"Guiding Principles"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Simplicity and Minimalism"})}),"\n",(0,s.jsx)(i.p,{children:"Keep the codebase lightweight and minimalistic, focusing on core\nfunctionality without unnecessary complexity."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Automation through OpenAPI"})}),"\n",(0,s.jsx)(i.p,{children:"Use OpenAPI specifications to automate the generation of both APIs and\nclients."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Pluggability and Extensibility"})}),"\n",(0,s.jsx)(i.p,{children:"Design the system with pluggability in mind, allowing for easy extension and\ncustomization through well-defined interfaces and modules."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Task Queue for Privileged Operations"})}),"\n",(0,s.jsx)(i.p,{children:"Implement privileged system changes asynchronously through a task queue."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"RESTful API Design"})}),"\n",(0,s.jsx)(i.p,{children:"Follow RESTful principles to design the API, supporting full CRUD (Create,\nRead, Update, Delete) operations for managing Linux system configurations."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Reliability and Stability"})}),"\n",(0,s.jsx)(i.p,{children:"Prioritize the stability and reliability of the API over features, ensuring\nit can safely manage critical system-level configurations."}),"\n"]}),"\n"]})]})}function p(n={}){const{wrapper:i}={...(0,t.a)(),...n.components};return i?(0,s.jsx)(i,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},1151:(n,i,e)=>{e.d(i,{Z:()=>l,a:()=>o});var s=e(7294);const t={},r=s.createContext(t);function o(n){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function l(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(r.Provider,{value:i},n.children)}}}]);